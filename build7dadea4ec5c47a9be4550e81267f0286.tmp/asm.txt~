
./sketch_sep18a.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
   4:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   8:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  10:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  14:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  18:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  1c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  20:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  24:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  28:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  2c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  30:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  34:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  38:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  3c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  40:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  44:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  48:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  4c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  50:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  54:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  58:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  5c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  60:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  64:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>

00000068 <__ctors_start>:
  68:	b3 00       	.word	0x00b3	; ????

0000006a <__ctors_end>:
  6a:	11 24       	eor	r1, r1
  6c:	1f be       	out	0x3f, r1	; 63
  6e:	cf ef       	ldi	r28, 0xFF	; 255
  70:	d8 e0       	ldi	r29, 0x08	; 8
  72:	de bf       	out	0x3e, r29	; 62
  74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a0 e0       	ldi	r26, 0x00	; 0
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 34       	cpi	r26, 0x48	; 72
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>

00000086 <__do_global_ctors>:
  86:	10 e0       	ldi	r17, 0x00	; 0
  88:	ca e6       	ldi	r28, 0x6A	; 106
  8a:	d0 e0       	ldi	r29, 0x00	; 0
  8c:	04 c0       	rjmp	.+8      	; 0x96 <__do_global_ctors+0x10>
  8e:	22 97       	sbiw	r28, 0x02	; 2
  90:	fe 01       	movw	r30, r28
  92:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <__tablejump__>
  96:	c8 36       	cpi	r28, 0x68	; 104
  98:	d1 07       	cpc	r29, r17
  9a:	c9 f7       	brne	.-14     	; 0x8e <__do_global_ctors+0x8>
  9c:	0e 94 ca 00 	call	0x194	; 0x194 <main>
  a0:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <_exit>

000000a4 <__bad_interrupt>:
  a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a8 <setup>:
  a8:	61 e6       	ldi	r22, 0x61	; 97
  aa:	80 e0       	ldi	r24, 0x00	; 0
  ac:	91 e0       	ldi	r25, 0x01	; 1
  ae:	0c 94 61 00 	jmp	0xc2	; 0xc2 <_ZN14HardwareSerial5writeEh>

000000b2 <loop>:
  b2:	08 95       	ret

000000b4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
 sbi(*_ucsra, TXC0);
  b4:	dc 01       	movw	r26, r24
  b6:	ed 91       	ld	r30, X+
  b8:	fc 91       	ld	r31, X
  ba:	80 81       	ld	r24, Z
  bc:	80 64       	ori	r24, 0x40	; 64
  be:	80 83       	st	Z, r24
  c0:	08 95       	ret

000000c2 <_ZN14HardwareSerial5writeEh>:
}

size_t HardwareSerial::write(uint8_t c)
{
  c2:	cf 92       	push	r12
  c4:	df 92       	push	r13
  c6:	ff 92       	push	r15
  c8:	0f 93       	push	r16
  ca:	1f 93       	push	r17
  cc:	cf 93       	push	r28
  ce:	df 93       	push	r29
  d0:	1f 92       	push	r1
  d2:	cd b7       	in	r28, 0x3d	; 61
  d4:	de b7       	in	r29, 0x3e	; 62
  d6:	6c 01       	movw	r12, r24
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
  d8:	dc 01       	movw	r26, r24
  da:	16 96       	adiw	r26, 0x06	; 6
  dc:	9c 91       	ld	r25, X
  de:	16 97       	sbiw	r26, 0x06	; 6
  e0:	17 96       	adiw	r26, 0x07	; 7
  e2:	8c 91       	ld	r24, X
  e4:	17 97       	sbiw	r26, 0x07	; 7
  e6:	98 13       	cpse	r25, r24
  e8:	05 c0       	rjmp	.+10     	; 0xf4 <_ZN14HardwareSerial5writeEh+0x32>
  ea:	ed 91       	ld	r30, X+
  ec:	fc 91       	ld	r31, X
  ee:	80 81       	ld	r24, Z
  f0:	85 fd       	sbrc	r24, 5
  f2:	23 c0       	rjmp	.+70     	; 0x13a <_ZN14HardwareSerial5writeEh+0x78>
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }

  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
  f4:	f6 01       	movw	r30, r12
  f6:	06 81       	ldd	r16, Z+6	; 0x06
  f8:	10 e0       	ldi	r17, 0x00	; 0
  fa:	0f 5f       	subi	r16, 0xFF	; 255
  fc:	1f 4f       	sbci	r17, 0xFF	; 255
  fe:	0f 73       	andi	r16, 0x3F	; 63
 100:	11 27       	eor	r17, r17
 102:	f0 2e       	mov	r15, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
 104:	f6 01       	movw	r30, r12
 106:	87 81       	ldd	r24, Z+7	; 0x07
 108:	f8 12       	cpse	r15, r24
 10a:	0f c0       	rjmp	.+30     	; 0x12a <_ZN14HardwareSerial5writeEh+0x68>
    if (bit_is_clear(SREG, SREG_I)) {
 10c:	0f b6       	in	r0, 0x3f	; 63
 10e:	07 fc       	sbrc	r0, 7
 110:	f9 cf       	rjmp	.-14     	; 0x104 <_ZN14HardwareSerial5writeEh+0x42>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
 112:	d6 01       	movw	r26, r12
 114:	ed 91       	ld	r30, X+
 116:	fc 91       	ld	r31, X
 118:	80 81       	ld	r24, Z
 11a:	85 ff       	sbrs	r24, 5
 11c:	f3 cf       	rjmp	.-26     	; 0x104 <_ZN14HardwareSerial5writeEh+0x42>
	_tx_udr_empty_irq();
 11e:	c6 01       	movw	r24, r12
 120:	69 83       	std	Y+1, r22	; 0x01
 122:	0e 94 5a 00 	call	0xb4	; 0xb4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 126:	69 81       	ldd	r22, Y+1	; 0x01
 128:	ed cf       	rjmp	.-38     	; 0x104 <_ZN14HardwareSerial5writeEh+0x42>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
 12a:	86 81       	ldd	r24, Z+6	; 0x06
 12c:	e8 0f       	add	r30, r24
 12e:	f1 1d       	adc	r31, r1
 130:	60 87       	std	Z+8, r22	; 0x08
  _tx_buffer_head = i;
 132:	d6 01       	movw	r26, r12
 134:	16 96       	adiw	r26, 0x06	; 6
 136:	0c 93       	st	X, r16
	
  //sbi(*_ucsrb, UDRIE0);
  
  return 1;
 138:	0b c0       	rjmp	.+22     	; 0x150 <_ZN14HardwareSerial5writeEh+0x8e>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
 13a:	d6 01       	movw	r26, r12
 13c:	14 96       	adiw	r26, 0x04	; 4
 13e:	ed 91       	ld	r30, X+
 140:	fc 91       	ld	r31, X
 142:	15 97       	sbiw	r26, 0x05	; 5
 144:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
 146:	ed 91       	ld	r30, X+
 148:	fc 91       	ld	r31, X
 14a:	80 81       	ld	r24, Z
 14c:	80 64       	ori	r24, 0x40	; 64
 14e:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  //sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	0f 90       	pop	r0
 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	1f 91       	pop	r17
 15c:	0f 91       	pop	r16
 15e:	ff 90       	pop	r15
 160:	df 90       	pop	r13
 162:	cf 90       	pop	r12
 164:	08 95       	ret

00000166 <_GLOBAL__sub_I__ZN14HardwareSerial17_tx_udr_empty_irqEv>:
  
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
     volatile uint8_t *udr):
    _ucsra(ucsra), _ucsrb(ucsrb), 
    _udr(udr),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 166:	80 ec       	ldi	r24, 0xC0	; 192
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	90 93 01 01 	sts	0x0101, r25
 16e:	80 93 00 01 	sts	0x0100, r24
 172:	81 ec       	ldi	r24, 0xC1	; 193
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	90 93 03 01 	sts	0x0103, r25
 17a:	80 93 02 01 	sts	0x0102, r24
 17e:	86 ec       	ldi	r24, 0xC6	; 198
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	90 93 05 01 	sts	0x0105, r25
 186:	80 93 04 01 	sts	0x0104, r24
 18a:	10 92 06 01 	sts	0x0106, r1
 18e:	10 92 07 01 	sts	0x0107, r1
 192:	08 95       	ret

00000194 <main>:
#include <Arduino.h>
int main(void)
{
	setup();
 194:	0e 94 54 00 	call	0xa8	; 0xa8 <setup>
 	for (;;) {
		loop();
 198:	0e 94 59 00 	call	0xb2	; 0xb2 <loop>
 19c:	fd cf       	rjmp	.-6      	; 0x198 <main+0x4>

0000019e <__tablejump2__>:
 19e:	ee 0f       	add	r30, r30
 1a0:	ff 1f       	adc	r31, r31

000001a2 <__tablejump__>:
 1a2:	05 90       	lpm	r0, Z+
 1a4:	f4 91       	lpm	r31, Z
 1a6:	e0 2d       	mov	r30, r0
 1a8:	09 94       	ijmp

000001aa <_exit>:
 1aa:	f8 94       	cli

000001ac <__stop_program>:
 1ac:	ff cf       	rjmp	.-2      	; 0x1ac <__stop_program>
