
./sketch_sep18a.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
   4:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   8:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  10:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  14:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  18:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  1c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  20:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  24:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  28:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  2c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  30:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  34:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  38:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  3c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  40:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  44:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  48:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  4c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  50:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  54:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  58:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  5c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  60:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  64:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>

00000068 <__ctors_start>:
  68:	97 00       	.word	0x0097	; ????

0000006a <__ctors_end>:
  6a:	11 24       	eor	r1, r1
  6c:	1f be       	out	0x3f, r1	; 63
  6e:	cf ef       	ldi	r28, 0xFF	; 255
  70:	d8 e0       	ldi	r29, 0x08	; 8
  72:	de bf       	out	0x3e, r29	; 62
  74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a0 e0       	ldi	r26, 0x00	; 0
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 34       	cpi	r26, 0x48	; 72
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>

00000086 <__do_global_ctors>:
  86:	10 e0       	ldi	r17, 0x00	; 0
  88:	ca e6       	ldi	r28, 0x6A	; 106
  8a:	d0 e0       	ldi	r29, 0x00	; 0
  8c:	04 c0       	rjmp	.+8      	; 0x96 <__do_global_ctors+0x10>
  8e:	22 97       	sbiw	r28, 0x02	; 2
  90:	fe 01       	movw	r30, r28
  92:	0e 94 b5 00 	call	0x16a	; 0x16a <__tablejump__>
  96:	c8 36       	cpi	r28, 0x68	; 104
  98:	d1 07       	cpc	r29, r17
  9a:	c9 f7       	brne	.-14     	; 0x8e <__do_global_ctors+0x8>
  9c:	0e 94 ae 00 	call	0x15c	; 0x15c <main>
  a0:	0c 94 b9 00 	jmp	0x172	; 0x172 <_exit>

000000a4 <__bad_interrupt>:
  a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a8 <setup>:
  a8:	61 e6       	ldi	r22, 0x61	; 97
  aa:	80 e0       	ldi	r24, 0x00	; 0
  ac:	91 e0       	ldi	r25, 0x01	; 1
  ae:	0c 94 61 00 	jmp	0xc2	; 0xc2 <_ZN14HardwareSerial5writeEh>

000000b2 <loop>:
  b2:	08 95       	ret

000000b4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
 sbi(*_ucsra, TXC0);
  b4:	dc 01       	movw	r26, r24
  b6:	ed 91       	ld	r30, X+
  b8:	fc 91       	ld	r31, X
  ba:	80 81       	ld	r24, Z
  bc:	80 64       	ori	r24, 0x40	; 64
  be:	80 83       	st	Z, r24
  c0:	08 95       	ret

000000c2 <_ZN14HardwareSerial5writeEh>:
}

void HardwareSerial::write(uint8_t c)
{
  c2:	0f 93       	push	r16
  c4:	1f 93       	push	r17
  c6:	cf 93       	push	r28
  c8:	df 93       	push	r29
  ca:	1f 92       	push	r1
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
  d0:	8c 01       	movw	r16, r24
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
  d2:	dc 01       	movw	r26, r24
  d4:	16 96       	adiw	r26, 0x06	; 6
  d6:	9c 91       	ld	r25, X
  d8:	16 97       	sbiw	r26, 0x06	; 6
  da:	17 96       	adiw	r26, 0x07	; 7
  dc:	8c 91       	ld	r24, X
  de:	17 97       	sbiw	r26, 0x07	; 7
  e0:	98 13       	cpse	r25, r24
  e2:	05 c0       	rjmp	.+10     	; 0xee <_ZN14HardwareSerial5writeEh+0x2c>
  e4:	ed 91       	ld	r30, X+
  e6:	fc 91       	ld	r31, X
  e8:	80 81       	ld	r24, Z
  ea:	85 fd       	sbrc	r24, 5
  ec:	0f c0       	rjmp	.+30     	; 0x10c <_ZN14HardwareSerial5writeEh+0x4a>
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return;
  }

  while (0== _tx_buffer_tail) {
  ee:	f8 01       	movw	r30, r16
  f0:	87 81       	ldd	r24, Z+7	; 0x07
  f2:	81 11       	cpse	r24, r1
  f4:	06 c0       	rjmp	.+12     	; 0x102 <_ZN14HardwareSerial5writeEh+0x40>
    _tx_udr_empty_irq();
  f6:	c8 01       	movw	r24, r16
  f8:	69 83       	std	Y+1, r22	; 0x01
  fa:	0e 94 5a 00 	call	0xb4	; 0xb4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
  fe:	69 81       	ldd	r22, Y+1	; 0x01
 100:	f6 cf       	rjmp	.-20     	; 0xee <_ZN14HardwareSerial5writeEh+0x2c>
  }
  _tx_buffer[_tx_buffer_head] = c;
 102:	86 81       	ldd	r24, Z+6	; 0x06
 104:	e8 0f       	add	r30, r24
 106:	f1 1d       	adc	r31, r1
 108:	60 87       	std	Z+8, r22	; 0x08
  
  return;
 10a:	0b c0       	rjmp	.+22     	; 0x122 <_ZN14HardwareSerial5writeEh+0x60>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
 10c:	d8 01       	movw	r26, r16
 10e:	14 96       	adiw	r26, 0x04	; 4
 110:	ed 91       	ld	r30, X+
 112:	fc 91       	ld	r31, X
 114:	15 97       	sbiw	r26, 0x05	; 5
 116:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
 118:	ed 91       	ld	r30, X+
 11a:	fc 91       	ld	r31, X
 11c:	80 81       	ld	r24, Z
 11e:	80 64       	ori	r24, 0x40	; 64
 120:	80 83       	st	Z, r24
    _tx_udr_empty_irq();
  }
  _tx_buffer[_tx_buffer_head] = c;
  
  return;
}
 122:	0f 90       	pop	r0
 124:	df 91       	pop	r29
 126:	cf 91       	pop	r28
 128:	1f 91       	pop	r17
 12a:	0f 91       	pop	r16
 12c:	08 95       	ret

0000012e <_GLOBAL__sub_I__ZN14HardwareSerial17_tx_udr_empty_irqEv>:
  
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
     volatile uint8_t *udr):
    _ucsra(ucsra), _ucsrb(ucsrb), 
    _udr(udr),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 12e:	80 ec       	ldi	r24, 0xC0	; 192
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	90 93 01 01 	sts	0x0101, r25
 136:	80 93 00 01 	sts	0x0100, r24
 13a:	81 ec       	ldi	r24, 0xC1	; 193
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	90 93 03 01 	sts	0x0103, r25
 142:	80 93 02 01 	sts	0x0102, r24
 146:	86 ec       	ldi	r24, 0xC6	; 198
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	90 93 05 01 	sts	0x0105, r25
 14e:	80 93 04 01 	sts	0x0104, r24
 152:	10 92 06 01 	sts	0x0106, r1
 156:	10 92 07 01 	sts	0x0107, r1
 15a:	08 95       	ret

0000015c <main>:
#include <Arduino.h>
int main(void)
{
	setup();
 15c:	0e 94 54 00 	call	0xa8	; 0xa8 <setup>
 	for (;;) {
		loop();
 160:	0e 94 59 00 	call	0xb2	; 0xb2 <loop>
 164:	fd cf       	rjmp	.-6      	; 0x160 <main+0x4>

00000166 <__tablejump2__>:
 166:	ee 0f       	add	r30, r30
 168:	ff 1f       	adc	r31, r31

0000016a <__tablejump__>:
 16a:	05 90       	lpm	r0, Z+
 16c:	f4 91       	lpm	r31, Z
 16e:	e0 2d       	mov	r30, r0
 170:	09 94       	ijmp

00000172 <_exit>:
 172:	f8 94       	cli

00000174 <__stop_program>:
 174:	ff cf       	rjmp	.-2      	; 0x174 <__stop_program>
